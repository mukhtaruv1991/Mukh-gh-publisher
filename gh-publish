#!/data/data/com.termux/files/usr/bin/bash

# --- gh-publish: The Multi-Mode Auto-Publisher (v11.1 - Options Fix) ---

# --- Configuration & Global Variables ---
CONFIG_FILE="$HOME/.gh-publish.conf"
IGNORE_PATTERNS=( '.git' '.idea' 'build' 'dist' 'out' 'node_modules' 'vendor' 'packages' '.gradle' 'gen' 'bin' '__pycache__' '*.apk' '*.aab' '*.log' '*.lock' '*.tmp' '*.swp' )
RSYNC_EXCLUDES=""
for p in "${IGNORE_PATTERNS[@]}"; do RSYNC_EXCLUDES+=" --exclude '$p'"; done

# --- Helper Functions ---
_log_error() { echo "‚ùå ERROR: $1" >&2; exit 1; }
_log_info() { echo "‚ÑπÔ∏è $1"; }
_log_success() { echo "‚úÖ $1"; }
_log_rocket() { echo "üöÄ $1"; }

# --- Help Message Function ---
show_help() {
  echo "gh-publish: The Multi-Mode Auto-Publisher (v11.1)"
  echo "Automates publishing projects to GitHub from Termux."
  echo ""
  echo "USAGE:"
  echo "  gh-publish [OPTION | PROJECT_NAME]"
  echo ""
  echo "MODES & OPTIONS:"
  echo "  (no arguments)   Publishes the project in the current directory."
  echo "  <PROJECT_NAME>   Finds a project by name in standard locations and publishes it."
  echo "  --from-path      Starts interactive mode to publish from a specific path."
  echo "  --setup          Configures your GitHub Personal Access Token."
  echo "  -h, --help       Displays this help message."
}

# --- Setup Function ---
setup_token() {
  _log_info "--- GitHub Personal Access Token Setup ---"
  read -p "Enter your GitHub Token (with 'repo' scope): " GITHUB_TOKEN
  echo "GITHUB_TOKEN='$GITHUB_TOKEN'" > "$CONFIG_FILE"
  chmod 600 "$CONFIG_FILE"
  _log_success "Token saved securely."
}

# --- Core Publishing Logic (The Engine) ---
run_publish_engine() {
  local project_dir="$1"
  cd "$project_dir" || _log_error "Could not navigate to project directory '$project_dir'."
  _log_rocket "Starting publish process for '$(basename "$project_dir")'..."
  if [ -d ".git" ] && git remote -v | grep -q "origin.*push"; then
      _log_info "Project already published. Switching to Update Mode."
      git add .;
      if git diff --staged --quiet; then
          _log_info "No new changes detected.";
      else
          read -p "Enter commit message: " COMMIT_MSG
          git commit -m "${COMMIT_MSG:-"Update via gh-publish"}"
          _log_info "Pushing updates..."; git push origin main
      fi
  else
      _log_info "New project detected. Starting Publish Mode."
      DEFAULT_REPO_NAME=$(basename "$(pwd)")
      read -p "Repo name (default: '$DEFAULT_REPO_NAME'): " REPO_NAME
      REPO_NAME=${REPO_NAME:-$DEFAULT_REPO_NAME}
      read -p "Description: " REPO_DESC
      read -p "Private? (y/N): " IS_PRIVATE
      PRIVATE_FLAG="false"; [[ "$IS_PRIVATE" =~ ^[Yy]$ ]] && PRIVATE_FLAG="true"
      [ ! -f "README.md" ] && { echo "# $REPO_NAME" > README.md; echo "$REPO_DESC" >> README.md; }
      [ ! -f ".gitignore" ] && { for p in "${IGNORE_PATTERNS[@]}"; do echo "$p" >> .gitignore; done; }
      _log_info "Creating remote repo '$REPO_NAME'..."
      USERNAME=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/user | jq -r '.login')
      API_URL="https://api.github.com/user/repos"
      JSON_PAYLOAD=$(jq -n --arg n "$REPO_NAME" --arg d "$REPO_DESC" --argjson p "$PRIVATE_FLAG" '{name:$n, description:$d, private:$p}')
      RESPONSE=$(curl -s -L -X POST -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL" -d "$JSON_PAYLOAD")
      CLONE_URL=$(echo "$RESPONSE" | jq -r '.clone_url')
      [ "$CLONE_URL" == "null" ] && _log_error "Repo creation failed: $(echo "$RESPONSE" | jq -r '.errors[0].message')"
      _log_success "Remote repo created."
      _log_info "Initial push..."; git init &>/dev/null; git add .; git commit -m "Initial publish"; git branch -M main; git remote add origin "$CLONE_URL"; git push -u origin main
  fi
  [ $? -eq 0 ] && echo "üéâ Success! Project is on GitHub." || _log_error "Git operation failed."
}

# --- Main Argument Parsing & Mode Selection (FIXED) ---
case "$1" in
  -h|--help) show_help; exit 0;;
  --setup) setup_token; exit 0;;
  --from-path)
    read -p "Enter the full path of the project to import and publish: " SOURCE_PATH
    [ ! -d "$SOURCE_PATH" ] && _log_error "Source path '$SOURCE_PATH' is not a valid directory."
    PROJECT_NAME=$(basename "$SOURCE_PATH")
    TEMP_DIR="$HOME/gh_publish_temp/$PROJECT_NAME"
    _log_info "Importing project from '$SOURCE_PATH' to '$TEMP_DIR'..."
    rm -rf "$TEMP_DIR"; mkdir -p "$TEMP_DIR"
    eval "rsync -a --progress \"$SOURCE_PATH/\" \"$TEMP_DIR/\" $RSYNC_EXCLUDES"
    _log_success "Project imported."
    run_publish_engine "$TEMP_DIR"
    exit 0
    ;;
esac
if [ ! -f "$CONFIG_FILE" ]; then _log_error "Token not found. Run 'gh-publish --setup' first."; fi
source "$CONFIG_FILE"
if [ -n "$1" ]; then
  TARGET_NAME="$1"
  _log_info "Searching for '$TARGET_NAME'..."
  SEARCH_PATHS=("$HOME/projects" "$HOME/bin" "$HOME/storage/shared")
  FOUND_PATH=""
  for path in "${SEARCH_PATHS[@]}"; do [ -e "$path/$TARGET_NAME" ] && { FOUND_PATH="$path/$TARGET_NAME"; break; }; done
  [ -z "$FOUND_PATH" ] && _log_error "Could not find '$TARGET_NAME' in standard locations."
  _log_success "Found at '$FOUND_PATH'."
  if [ -d "$FOUND_PATH" ]; then run_publish_engine "$FOUND_PATH";
  else
    TEMP_DIR="$HOME/gh_publish_temp/$(basename "$FOUND_PATH")_proj"
    _log_info "Target is a single file. Creating temporary project in '$TEMP_DIR'..."
    rm -rf "$TEMP_DIR"; mkdir -p "$TEMP_DIR"; cp "$FOUND_PATH" "$TEMP_DIR/"
    run_publish_engine "$TEMP_DIR"
  fi
else
  run_publish_engine "$(pwd)"
fi
